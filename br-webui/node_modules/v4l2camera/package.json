{
  "_args": [
    [
      "v4l2camera@git://github.com/jaxxzer/node-v4l2camera.git#799f6eda",
      "/home/pi/companion/br-webui"
    ]
  ],
  "_from": "git://github.com/jaxxzer/node-v4l2camera.git#799f6eda",
  "_id": "v4l2camera@1.0.4",
  "_inCache": true,
  "_installable": true,
  "_location": "/v4l2camera",
  "_phantomChildren": {},
  "_requested": {
    "hosted": {
      "directUrl": "https://raw.githubusercontent.com/jaxxzer/node-v4l2camera/799f6eda/package.json",
      "gitUrl": "git://github.com/jaxxzer/node-v4l2camera.git#799f6eda",
      "httpsUrl": "git+https://github.com/jaxxzer/node-v4l2camera.git#799f6eda",
      "shortcut": "github:jaxxzer/node-v4l2camera#799f6eda",
      "ssh": "git@github.com:jaxxzer/node-v4l2camera.git#799f6eda",
      "sshUrl": "git+ssh://git@github.com/jaxxzer/node-v4l2camera.git#799f6eda",
      "type": "github"
    },
    "name": "v4l2camera",
    "raw": "v4l2camera@git://github.com/jaxxzer/node-v4l2camera.git#799f6eda",
    "rawSpec": "git://github.com/jaxxzer/node-v4l2camera.git#799f6eda",
    "scope": null,
    "spec": "git://github.com/jaxxzer/node-v4l2camera.git#799f6eda",
    "type": "hosted"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "git://github.com/jaxxzer/node-v4l2camera.git#799f6edaff506d00928795ccea223c10ccb8846c",
  "_shasum": "31a391cc15bcb89813e9ffe72429b5d31f22ee3c",
  "_shrinkwrap": null,
  "_spec": "v4l2camera@git://github.com/jaxxzer/node-v4l2camera.git#799f6eda",
  "_where": "/home/pi/companion/br-webui",
  "author": {
    "email": "bellbind@gmail.com",
    "name": "bellbind",
    "url": "http://bellbind.tumblr.com"
  },
  "bugs": {
    "url": "https://github.com/bellbind/node-v4l2camera/issues"
  },
  "contributors": [
    {
      "name": "Tim Cameron Ryan",
      "email": "id@timryan.org",
      "url": "https://github.com/tcr"
    },
    {
      "name": "vird",
      "email": "virdvip@gmail.com",
      "url": "https://github.com/vird"
    },
    {
      "name": "Lennart Kolmodin",
      "email": "kolmodin@gmail.com",
      "url": "https://github.com/kolmodin"
    }
  ],
  "dependencies": {
    "nan": ">=2.3.0"
  },
  "description": "Capturing images from USB(UVC) webcam on linux machines",
  "devDependencies": {
    "jpeg-js": "*",
    "pngjs": "*"
  },
  "directories": {
    "example": "./examples"
  },
  "engines": {
    "node": ">=4.0.0"
  },
  "gitHead": "799f6edaff506d00928795ccea223c10ccb8846c",
  "gypfile": true,
  "homepage": "https://github.com/bellbind/node-v4l2camera",
  "keywords": [
    "camera",
    "linux",
    "native",
    "v4l2",
    "video4linux2"
  ],
  "license": "(MIT OR LGPL-3.0)",
  "main": "./index.js",
  "name": "v4l2camera",
  "optionalDependencies": {},
  "os": [
    "linux"
  ],
  "readme": "# node-v4l2camera\n\nCapturing images from USB(UVC) webcam on linux machines.\n\n## Requirements\n\n- node >= 4.x\n- video4linux2 headers\n- c and c++ compiler with `-std=c11` and `-std=c++14`\n    - gcc >= 4.9\n\n## Install\n\nOn linux machines:\n\n```bash\nnpm install v4l2camera\n```\n\n- package details: https://npmjs.org/package/v4l2camera\n\n## Usage\n\n```js\nvar v4l2camera = require(\"v4l2camera\");\n\nvar cam = new v4l2camera.Camera(\"/dev/video0\");\nif (cam.configGet().formatName !== \"MJPG\") {\n  console.log(\"NOTICE: MJPG camera required\");\n  process.exit(1);\n}\ncam.start();\ncam.capture(function (success) {\n  var frame = cam.frameRaw();\n  require(\"fs\").createWriteStream(\"result.jpg\").end(Buffer(frame));\n  cam.stop();\n});\n```\n\nFor more detail see: examples/*.js (required \"pngjs\" modules)\n\n## API\n\nInitializing and Configuration API\n\n- `var cam = new v4l2camera.Camera(device)`\n    - `device`: e.g. `\"/dev/video0\"`\n- `cam.formats`: Array of available frame formats\n- `var format = cam.formats[n]`\n    - `format.formatName`: Name of pixel format. e.g. `\"YUYV\"`, `\"MJPG\"`\n    - `format.format`: ID number of pixel format\n    - `format.width`: Frame width\n    - `format.height`: Frame height\n    - `format.interval.numerator` and `format.interval.denominator`\n      : Capturing interval per `numerator/denominator` seconds \n      (e.g. 30fps is 1/30)\n- `cam.configSet(format)`\n  : Set capture `width`, `height`, `interval` per `numerator/denominator` sec\n  if the members exist in the `format` object\n- `cam.configGet()` : Get a `format` object of current config\n\nCapturing API (control flow)\n\n- `cam.start()`\n- `cam.stop(afterStoped)`\n    - call re-`config(format)` or re-`start()` in `afterStoped()` callback\n- `cam.capture(afterCaptured)`: Do cache a current captured frame\n    - use `cam.frameRaw()` in `afterCaptured(true)` callback\n\nCapturing API (frame access)\n\n- `cam.frameRaw()`: Get the cached raw frame as `Uint8Array`\n   (YUYU frame is array of YUYV..., MJPG frame is single JPEG compressed data)\n- `cam.reloadControls()`: Reload the `cam.controls` array\n   (use if you need to update the flags)\n\nCapturing API (camera frame info)\n\n- `cam.device`: the device file name e.g. `\"/dev/video0\"`\n- `cam.width`: pixel width of the camera\n- `cam.height`: pixel height of the camera\n\nControl API\n\n- `cam.controls`: Array of the control information\n- `cam.controlGet(id)`: Get int value of the control of the `id`\n  (id is one of cam.controls[n].id)\n- `cam.controlSet(id, value)`: Set int value of the control of the `id`\n- `var control = cam.controls[n]`: Control spec\n    - `control.id`: Control `id` for controlGet and controlSet\n    - `control.name`: Control name string\n    - `control.type`: `\"int\"`, `\"bool\"`, `\"button\"`, `\"menu\"` or other types\n    - `control.max`, `control.min`, `control.step`: value should be\n      `min <= v` and `v <= max` and `(v - min) % step === 0`\n    - `control.default`: default value of the control\n    - `control.flags`: Several bool flags of the controls\n    - `control.menu`: Array of items. \n      A control value is the index of the menu item when type is `\"menu\"`.\n\n## Build for Development\n\nOn linux machines:\n\n```bash\ncd myproject\nmkdir -p node_modules\ncd node_modules\ngit clone https://github.com/bellbind/node-v4l2camera.git v4l2camera\ncd v4l2camera\nnpm install\ncd ../..\n```\n\n\"build/Release/v4l2camera.node\" is exist after the build.\n\n## Tested Environments\n\n- Ubuntu wily armhf on BeagleBone Black with USB Buffalo BSW13K10H\n- Ubuntu wily amd64 on Acer Aspire One with its screen facecam\n- [Travis-CI (build only)](https://travis-ci.org/bellbind/node-v4l2camera):\n  ![Build Status](https://travis-ci.org/bellbind/node-v4l2camera.svg)\n\n## Licenses\n\n[MIT](http://opensource.org/licenses/MIT) and \n[LGPL-3.0](http://opensource.org/licenses/LGPL-3.0) dual\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/bellbind/node-v4l2camera.git"
  },
  "scripts": {
    "install": "node-gyp rebuild",
    "make-c-examples": "make -f c-examples.makefile",
    "test": "node test.js"
  },
  "version": "1.0.4"
}
